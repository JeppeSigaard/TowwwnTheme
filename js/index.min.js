
var HelpFunctions = {

    // Num of includes
    numOfIncludes: function( haystack, needle ) {
        var numOf = 0, indexOf = 0;
        while ( indexOf !== -1 ) {
            indexOf = haystack.indexOf( needle, indexOf );
            if ( indexOf !== -1 ) { numOf++; indexOf++; }
        }

        return numOf;
    },
    
    // Nl2p
    nl2p: function( text ) {
        return (text.length > 0 ? '<p>' + text.replace(/[\r\n]+/g, '</p><p>') + '</p>' : null);
    },

    // Linkifier
    linkifier: function( text ) {
        
        // URLs starting with http://, https://, or ftp://
        var replacePattern1 = /(\b(https?|ftp):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gim;
        var replacedText = text.replace(replacePattern1, '<a href="$1" target="_blank">$1</a>');

        // URLs starting with www. (without // before it, or it'd re-link the ones done above)
        var replacePattern2 = /(^|[^\/])(www\.[\S]+(\b|$))/gim;
        var replacedText = replacedText.replace(replacePattern2, '$1<a href="http://$2" target="_blank">$2</a>');

        // Change email addresses to mailto:: links
        var replacePattern3 = /(\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,6})/gim;
        var replacedText = replacedText.replace(replacePattern3, '<a href="mailto:$1">$1</a>');

        return replacedText;

    },

    // Format date
    formatDate: function( timestr, includeHour, includeDay ) {
        var date = new Date( timestr.substr(0, 16) );
        var response = '';

        if ( includeDay ) {
            var days = [ 'Søndag', 'Mandag', 'Tirsdag', 'Onsdag', 'Torsdag', 'Fredag', 'Lørdag' ];
            response+=days[date.getDay()]+' d. '; }

        response+=parseInt(date.getDate())+' / '+parseInt((date.getMonth()+1))+' - '+parseInt(date.getFullYear());

        if ( includeHour ) {
            if ( date.getMinutes() < 10 ) {
                response += ' '+(date.getHours()-1)+':0'+date.getMinutes();
            } else {
                response += ' '+(date.getHours()-1)+':'+date.getMinutes();
            }
        }

        return response;
    }
    
}



// Heya
jQuery.prototype.monthPicker = function( options, callback ) {

    if ( options.remove === true ) {
        // Removes Month picker
        $('.'+pickerClass).removeClass('active');
        $(this).removeClass('pickerActive');
        setTimeout(function() {
            $('.'+pickerClass).remove();
        }, 150);
    }
    
    // Params
    var appendSelector = null;
    if ( typeof options.appendSelector !== 'undefined' && options.appendSelector !== null ) appendSelector = options.appendSelector;
    
    var years = null;
    if ( typeof options.years !== 'undefined' && options.years !== null ) years = options.years;
    
    // Other vars
    var months = {
        '0': 'Jan',
        '1': 'Feb',
        '2': 'Mar',
        '3': 'Apr',
        '4': 'Maj',
        '5': 'Jun',
        '6': 'Jul',
        '7': 'Aug',
        '8': 'Sep',
        '9': 'Okt',
        '10': 'Nov',
        '11': 'Dec',
    }
    
    var years = [
        '2016',
        '2017',
        '2018'
    ]

    var elem = $(this),
        pickerClass = 'monthPicker_selector',
        pickerHtml = '<div class="'+pickerClass+'">',
        previousSelctions = [],
        clickPoint = null;

    for ( var year in years ) {
        for ( var key in months ) {
            pickerHtml += '<div class="month" data-key="'+key+'" id="'+years[year]+'-'+key+'"><div class="monthTitle">'+months[key]+'</div>';
            pickerHtml += '<div class="yearTitle" data-key="'+years[year]+'">'+years[year]+'</div></div>';
        }
    } pickerHtml += '</div>';

    // Adds html to elem itself
    elem.html( 'Alle <div class="pickerArrow"></div>' );

    // Appends on click
    elem.click( function() {
        if ( $(this).hasClass('pickerActive') ) {

            // Removes Month picker
            $('.'+pickerClass).removeClass('active');
            $(this).removeClass('pickerActive');
            setTimeout(function() {
                $('.'+pickerClass).remove();
            }, 150);

        } else {

            // Appends picker to defined selector or body
            if ( appendSelector !== null ) $(appendSelector).append( pickerHtml );
            else $('body').append( pickerHtml );
            $(this).addClass('pickerActive');
            $('.'+pickerClass).flickity({
                cellAlign: 'center',
                prevNextButtons: false,
                pageDots: false,
                contain: true,
            });

            $('.'+pickerClass).addClass('active');
            if ( previousSelctions.length === 1 ) {
                $('.'+pickerClass+' #'+previousSelctions[0]).addClass('active');
            } else if ( previousSelctions.length > 1 ) {
                $('.'+pickerClass+' #'+previousSelctions[0]).addClass('active-left');
                $('.'+pickerClass+' #'+previousSelctions[previousSelctions.length-1]).addClass('active-right');
                for ( var i = 1; i < previousSelctions.length-1; i++ ) {
                    $('.'+pickerClass+' #'+previousSelctions[i]).addClass('active-middle');
                }
            }

            // Picker functionality
            $('.'+pickerClass+' .month').click( function() {
                $('.'+pickerClass+' .month').removeClass('active');
                $('.'+pickerClass+' .month').removeClass('active-left');
                $('.'+pickerClass+' .month').removeClass('active-middle');
                $('.'+pickerClass+' .month').removeClass('active-right');
                previousSelctions = [];

                var ncpMonth = parseInt($(this).attr('data-key'));
                var ncpYear = parseInt($('.yearTitle', this).attr('data-key'))
                var from = new Date(ncpYear, ncpMonth).getTime();
                var to = new Date(ncpYear, ncpMonth+1).getTime();

                if ( clickPoint !== null ) {
                    if ($(this).attr('data-key') === clickPoint.attr('data-key')) {
                        clickPoint.removeClass('active');
                        elem[0].month_from = new Date().getTime();
                        elem[0].month_to = new Date(3000, 1).getTime();
                        clickPoint = null;
                        elem.html( 'Alle <div class="pickerArrow"></div>' );
                        callback( elem ); return;
                    }

                    var ocpMonth = parseInt(clickPoint.attr('data-key'));
                    var ocpYear = parseInt($('.yearTitle', clickPoint).attr('data-key'));
                    var fromPoint = 0, toPoint = 0, fromYear = 0, toYear = 0;
                    if ( new Date( ocpYear, ocpMonth ).getTime() < new Date ( ncpYear, ncpMonth ).getTime() ) {
                        from = new Date( ocpYear, ocpMonth ).getTime(); fromPoint = ocpMonth; fromYear = ocpYear;
                        to = new Date( ncpYear, ncpMonth+1 ).getTime(); toPoint = ncpMonth; toYear = ncpYear;
                        clickPoint.addClass('active-left');
                        $(this).addClass('active-right')
                    } else {
                        from = new Date( ncpYear, ncpMonth ).getTime(); fromPoint = ncpMonth; fromYear = ncpYear;
                        to = new Date( ocpYear, ocpMonth+1 ).getTime(); toPoint = ocpMonth; toYear = ocpYear;
                        $(this).addClass('active-left');
                        clickPoint.addClass('active-right');
                    }


                    elem.html( months[fromPoint]+' '+String(fromYear).substr(2,3)+' - '+months[toPoint]+' '+String(toYear).substr(2,3)+'<div class="pickerArrow"></div>' );
                    clickPoint = null;

                } else {
                    clickPoint = $(this);
                    $(this).addClass('active');
                    elem.html( months[$(this).attr('data-key')]+' '+$('.yearTitle').attr('data-key')+'<div class="pickerArrow"></div>' );
                    previousSelctions.push( $('.yearTitle',this).attr('data-key')+'-'+$(this).attr('data-key') );
                }

                for ( var iy = fromYear; iy < toYear+1; iy++ ) {
                    for ( var i = fromPoint; i < toPoint+1; i++ ) {
                        previousSelctions.push( iy+'-'+i );
                    }
                }

                if ( fromYear !== 'undefined' && toYear !== 'undefined' ) {
                    if ( parseInt(fromYear) !== parseInt(toYear) ) {
                        for ( var month = fromPoint+1; month < 12; month++ ) {
                            $('#'+fromYear+'-'+month).addClass('active-middle');
                        }

                        for ( var month = 0; month < toPoint; month++ ) {
                            $('#'+toYear+'-'+month).addClass('active-middle');
                        }

                        for ( var year = fromYear+1; year < toYear; year++ ) {
                            for ( var month = 0; month < 12; month++ ) {
                                $('#'+year+'-'+month).addClass('active-middle');
                            }
                        }
                    } else {
                        for ( var month = fromPoint+1; month < toPoint; month++ ) {
                            $('#'+fromYear+'-'+month).addClass('active-middle');
                        }
                    }
                }

                elem[0].month_from = from;
                elem[0].month_to = to;
                callback( elem );

            });

        }
    }.bind(elem, pickerClass));

}



// Widget way of doing stuff
var EventContentModule = {

    // Variables
    settings: {
        cb: function() {},
        ready: false,
        get_url: rest_api+'events?per_page=100&page=',
        page_counter: 1,
        default_appendSelector: '.eventscontainer',
        events: [],
        placeholder_img: 'https://developer.walgreens.com/sites/default/files/404.jpg',
    },

    // Ctor
    init: function( cb ) {
        this.settings.cb = cb;
        this.get_events();
    },

    // Gets events and assigns them to event var
    get_events: function() {

        // Opens xhr request
        var request = new XMLHttpRequest();
        request.onload = function( data ) {

            var json = $.parseJSON( data.target.response );
            for ( var i = 0; i < json.length; i++ ) {
                if ( json[i].imgurl === 'undefined' || json[i].imgurl === null ) {
                    json[i].imgurl = this.settings.placeholder_img; }
                this.settings.events.push( json[i] );
            }

            if ( json.length < 1 ) {
                this.render_ready = true;
                this.settings.page_counter = 0;
                this.settings.events.sort(function( a, b ) {
                    if( a.start_time < b.start_time ) return -1;
                    if( a.start_time > b.start_time ) return 1;
                    return 0;
                });

                this.settings.cb();
                return;
            }

            this.settings.page_counter ++;
            this.get_events();

        }.bind(this);

        // Sends xhr request
        request.open('GET', this.settings.get_url+this.settings.page_counter.toString());
        request.send();

    },

}






// Location module
var LocationModule = {

    // Fields
    settings: {
        ready: false,
        page_counter: 1,
        locations: [],
        callback: null,
    },

    // Ctor
    init: function( cb ) {
        this.settings.callback = cb;
        this.get_locations();
    },

    // Get locations
    get_locations() {

        // Opens up new xhrequest
        var request = new XMLHttpRequest();
        request.onload = function( data ) {

            // Loop through data and plops it into array
            var jsonResponse = $.parseJSON( data.target.response );
            for ( var i = 0; i < jsonResponse.length; i++ ) {
                this.settings.locations.push( jsonResponse[i] );
            }

            // If no elems were received, loop done
            if ( jsonResponse.length < 1 ) {
                this.settings.page_counter = 0;
                this.settings.ready = true;
            } else {
                this.settings.page_counter++;
                this.get_locations( );
            }

        }.bind(this);

        // Specifies get url, and sends
        request.open( 'GET', rest_api+'locations?per_page=100&page='+this.settings.page_counter );
        request.send();

    },

    // Render locations
    render_locations: function() {
    },

    // Generate location html
    generate_location_html: function() {
    },

}


// Lcoation Category Module
var LocationCategoryModule = {
    
    // Fields
    settings: {
        ready: false,
        unsorted_location_categories: {},
        sorted_location_categories: [],
    },
    
    // Init
    init: function() {
        this.get_location_categories();
    },
    
    // Get Location Categories
    get_location_categories: function() {
        
        // Generates object of location categories,
        // from the existing location array
        var locations = LocationModule.settings.locations;
        for ( var i = 0; i < locations.length; i++ ) {
            for ( var ci = 0; ci < locations[i].categories.length; ci++ ) {
                var category = locations[i].categories[ci];
                if ( typeof this.settings.unsorted_location_categories[category.category_name] === 'undefined' ) {
                    this.settings.unsorted_location_categories[category.category_name] = {
                        category_counter: 1,
                        category_name: category.category_name,
                        category_imgurl: category.category_imgurl,
                    };
                } else { this.settings.unsorted_location_categories[category.category_name].category_counter++; }
            }
        } 
        
        // Sorts categories after highest counter
        var buffer = [];
        for ( var key in this.settings.unsorted_location_categories ) {
            var isset = false;
            for ( var i = 0; i < buffer.length; i++ ) {
                if ( this.settings.unsorted_location_categories[key].category_counter > buffer[i].category_counter ) {
                    buffer.splice( i, 0, this.settings.unsorted_location_categories[key] );
                    isset = true; break;
                }
            }
            
            if ( !isset ) buffer.push( this.settings.unsorted_location_categories[key] );
        } this.settings.sorted_location_categories = buffer;
        
        // Annnnd its ready
        this.settings.ready = true;
        
    },
    
    // Render Location Categories
    render_location_categories: function( appendSelector ) {
        var response = '<div class="category-container">'; 
        
        // Loops through all categories and generates html
        for ( var i = 0; i < this.settings.sorted_location_categories.length; i++ ) {
             response += this.generate_category_html( this.settings.sorted_location_categories[i] ); }
        
        // Appends html
        $( appendSelector ).append( response+='</div>' );
    
    },
    
    // Generate location category html
    generate_category_html: function( category ) {
        
        // Generates html
        var response = '<div class="category" style="background-image:url('+category.category_imgurl+')">';
        response += '<div class="category-content-container">';
        response += '<div class="category-title">'+category.category_name+'</div>';
        response += '<div class="category-count">'+category.category_counter+'</div></div></div>';
        return response;
    
    },
    
}



// View handler
var ViewHandler = {
    
    // Fields
    settings: {
        ready: false,
        poly_view: false,
        left_container: $('.left-container .content'),
        right_container: $('.right-container .content'),
    },
    
    // Init
    init: function() {

        // Load event single view
        var event_sv, lastScroll = 0, isNew = false;
        $(document).on( 'click', '.event', function() {

            ViewHandler.settings.right_container.addClass('spoopy');

            EventSingleModule.render_sv_event( $(this).attr('id') );
            EventSingleModule.bindUIActions();

            setTimeout(function(){
                syncScroll.rescaleContainer();
                syncScroll.setHorizontalPosition();
                ViewHandler.settings.right_container.removeClass('spoopy');
            },120);

        });

        this.settings.ready = true;
    },

    // Bind UI Actions
    bindUIActions: function() {
    },


    // Go to
    go_to: function( index ) {

    },

    // Reload view
    reload_view: function( timeout ) {

    },

    // Close single view
    closeSingleView: function() {
        ViewHandler.settings.left_container.addClass('no-trans').removeClass('active');
        ViewHandler.settings.right_container.addClass('no-trans').css({'height': '0px'}).html('').removeClass('active');

        setTimeout(function() {
            ViewHandler.settings.left_container.removeClass('no-trans');
            ViewHandler.settings.right_container.removeClass('no-trans');
            this.reload_view( false );
        }.bind(this), 150);

        ViewHandler.go_to( 0 );
    },

};







// Header Module
var HeaderModule = {

    // Vars
    settings: {
        menu_ready: false,
        breakpoint: 0,
        views: [],
    },

    // Init
    init: function() {
        var commercial_swiper = new Swiper ('.commercial-container', {
            direction: 'horizontal',
            loop: true,
            prevButton: '.prevButton',
            nextButton: '.nextButton',
        });

        this.bindUIActions();
    },

    // Bind ui actions
    bindUIActions: function() {

        // Adds classes to menu ( Like active, fixed, etc )
        this.settings.menu_ready = false;
        $(window).on('scroll', function() {
            $('.header-container').removeClass( 'active' );
            $('.menu-show-btns').removeClass( 'active' );

            this.settings.breakpoint = $('#header').height() + $('#header').position().top;
            if ( $(window).scrollTop() >= this.settings.breakpoint ) {
                $('.header-container').addClass( 'fixed' );
                $('.header-placeholder').addClass( 'fixed' );
                $('.menu-show-btns').addClass( 'show' );
                $('.event-singleview').addClass( 'fixed' );
                this.settings.menu_ready = true;
            } else {
                $('.header-container').removeClass( 'fixed' );
                $('.header-placeholder').removeClass( 'fixed' );
                $('.menu-show-btns').removeClass( 'show' );
                $('.event-singleview').removeClass( 'fixed' );
                this.settings.menu_ready = false;
            }

            if ( $(window).innerWidth() <= 640 ) {
                $('.header-container').addClass( 'fixed' );
                $('.header-placeholder').addClass( 'fixed' );
                $('.menu-show-btns').addClass( 'show' );
                $('.event-singleview').addClass( 'fixed' );
                this.settings.menu_ready = true;
            }

        }.bind(this));
        $(window).trigger('scroll');

        $(window).on('resize', function() {
            $(this).trigger('scroll');
        });

        // Checks for key press on space
        $('.menu-show-btns').on('click', this.show_menu.bind(this));
        $(window).on('keydown', function(e) {
            if ( $(window).scrollTop() > $('#header').height()
                && !$('.header-container').hasClass( 'active' )
                && e.keyCode === 32 ) {

                e.preventDefault();
                $('#searchfield').focus();
                this.show_menu();

            } else if (  $(window).scrollTop() > $('#header').height()
                         && $('.header-container').hasClass('active')
                         && e.keyCode === 32 ) {

                if ( $('#searchfield').val() === '' || $('#searchfield').val() === ' ' ) {
                    e.preventDefault();
                    $('#searchfield').val( '' );
                    this.show_menu();
                }
            }
        }.bind(this));

    },

    // Show menu ( Drop down look-a-like )
    show_menu: function() {
          if ( this.settings.menu_ready ) {
            if ( $('.menu-show-btns').hasClass( 'active' ) ) {
                $('.menu-show-btns').removeClass( 'active' );
                $('.header-container').removeClass( 'active' );
            } else {
                $('.menu-show-btns').addClass( 'active' );
                $('.header-container').addClass( 'active' );
            }
        }
    },

}


// Front page module
var FrontPageModule = {
    
    // Variables
    settings: {
        ready: false,
        lc: '',

        loadMoreGetNum: 25,
        firstGetNum: 30,
    },
    
    // Init
    init: function() {

        // Generates left container content
        var lc = '<div id="eventsbar">';
        lc += '<div id="eventslayoutbtns">';
        lc += '<img class="blocklayoutbtn" src="'+template_uri+'/style/assets/icons/blockLayout.PNG" />';
        lc += '<img class="linelayoutbtn" src="'+template_uri+'/style/assets/icons/lineLayout.PNG" /></div>';
        lc += '<div class="monthSelector"></div>';
        lc += '</div><div class="picker"></div>';

        lc += '<div class="eventscontainer"></div>';
        lc += '<div class="load-more">Indlæs '+this.settings.loadMoreGetNum+' mere</div>'

        this.settings.lc = lc;
        ViewHandler.settings.left_container.html(lc);

        // Generates front page
        this.generate_front_page();

    },
    
    // Generate front page
    generate_front_page: function( ) {

        // Adds the base front page html to the container
        if ( ViewHandler.settings.poly_view ) {
            ViewHandler.closeSingleView();
        } else {
            ViewHandler.settings.left_container.removeClass('active');
            ViewHandler.settings.right_container.html('').removeClass('active');
        }

        ViewHandler.settings.left_container.html( this.settings.lc );
        $('.eventscontainer').removeClass('lineLayout');

        // Binds ui actions
        this.bindUIActions();

        // Gets events and locations categories
        EventCalenderModule.renderEventCalender( '.eventscontainer', { getNum: this.settings.firstGetNum, acceptOld: false });
        ViewHandler.bindUIActions();
        this.updateLayoutPosition();
        ViewControllerModule.disableBackButton();

        // Reload view heights
        if(ViewHandler.settings.poly_view){
            setTimeout(function(){
                ViewHandler.reload_view( false );
                ViewHandler.go_to(0);
            },150);
        }

        // Annnnnd its ready
        this.settings.ready = true;

    },

    // Bind UI Actions
    bindUIActions: function() {
        if ( !this.settings.ready ) {
            $('.logo-container').on( 'click', function() {
                this.generate_front_page();
                $('#searchfield').val('');
            }.bind( this ));
        }

        $(document).on('click', '.event', function() {
            this.updateLayoutPosition();
        }.bind(this));

        $('.load-more').on('click', function() {
            var rest = EventCalenderModule.loadMore( this.settings.loadMoreGetNum );
            if ( rest > this.settings.loadMoreGetNum ) rest = this.settings.loadMoreGetNum;
            else if ( rest === 0 ) {
                ViewHandler.settings.left_container.addClass('all-loaded');
                ViewHandler.reload_view( true );
            }
            $('.load-more').html( 'Indlæs '+rest+' mere' );
            syncScroll.rescaleContainer();
            $(window).trigger('scroll');
        }.bind(this));

        $('.blocklayoutbtn').on( 'click', function() {
            $('.eventscontainer').removeClass('lineLayout');
            ViewHandler.reload_view( true );
        });

        $('.linelayoutbtn').on( 'click', function() {
            $('.eventscontainer').addClass('lineLayout');
            ViewHandler.reload_view( true );
        });

        $('.monthSelector').monthPicker({
            'appendSelector': '.picker',
        }, function( elem ) {

            $('.eventscontainer').html( '' );
            EventCalenderModule.renderEventCalender( '.eventscontainer', { getNum: 20, acceptOld: true, from: elem[0].month_from, to: elem[0].month_to });
            ViewHandler.reload_view( true );
            this.updateLayoutPosition();

        }.bind(this));
    },

    // Update layout parts position
    updateLayoutPosition: function() {
        if ( !ViewHandler.settings.left_container.hasClass('all-loaded') ) {
            setTimeout(function() {
                if ( $('.event-sv-info').length > 0 ) { var esvi_height = $('.event-sv-info').outerHeight(); }
                else { var esvi_height = 141; }

                $('.load-more').css({'height': esvi_height+'px', 'line-height': esvi_height+'px'});
                ViewHandler.settings.left_container.css({'padding-bottom': esvi_height+'px'});
                ViewHandler.reload_view( false );
            }, 150);
        } else {
            ViewHandler.settings.left_container.css({'padding-bottom': '0px'});
        }
    }

}


// Event calender view module
var EventCalenderModule = {
    
    // Fields
    settings: {
        html: '',
        breakpointHtml: '',
        breakpoint: -1,
        breakpointArray: [],
        breakpointFrom: -1,
        breakpointTo: -1,
        breakpointView: '',
    },
    
    // Init
    init: function() {
    },
    
    // Render Events
    renderEventCalender: function( view, modifiers ) {

        this.settings.breakpointView = view;
        ViewHandler.settings.left_container.removeClass('all-loaded');
        
        // Checks for modifiers
        var acceptOld = false, getNum = 37, from = -1, to = -1, buffer = false, sort = true;
        if ( typeof modifiers.acceptOld !== 'undefined' ) acceptOld = modifiers.acceptOld;
        if ( typeof modifiers.getNum !== 'undefined' ) getNum = modifiers.getNum;
        if ( typeof modifiers.from !== 'undefined' ) from = modifiers.from;
        if ( typeof modifiers.to !== 'undefined' ) to = modifiers.to;
        if ( typeof modifiers.content !== 'undefined' ) { buffer = modifiers.content; sort = false; }

        if ( !buffer ) {

            // Makes render buffer array
            var buffer = [], events = EventContentModule.settings.events, i;
            for ( i = 0; i < events.length; i++ ) {
                if ( buffer.length > getNum ) {
                    this.settings.breakpoint = i; break; }

                var eventTime = new Date(events[i].start_time.substr(0,16)).getTime();
                if ( !acceptOld && eventTime < new Date().getTime() ) continue;
                if ( from !== -1 && from > eventTime ) continue;
                if ( to !== -1 && to < eventTime ) continue;

                buffer.push( events[i] );
            }

            this.settings.breakpointArray = events;

        } else {
            this.settings.breakpointArray = modifiers.content;
            this.settings.breakpoint = getNum;
        }

        this.settings.breakpointFrom = from;
        this.settings.breakpointTo = to;

        // Generates html
        for ( var i = 0; i < buffer.length; i++ ) {
            this.settings.html+=this.generateEventHtml( buffer[i] );
        }

        this.settings.breakpointHtml = this.settings.html;

        // Renders
        $(view).html( this.settings.html );
        this.settings.html = '';

    },

    // Load more
    loadMore: function( getNum ) {

        console.log( this.settings.breakpoint + ' - ' + this.settings.breakpointArray.length );

        // Generates event array
        var buffer = [], bpArray = this.settings.breakpointArray;
        for ( var i = this.settings.breakpoint; i < bpArray.length; i++ ) {
            var eventTime = new Date(bpArray[i].start_time.substr(0,16)).getTime();
            if ( buffer.length >= getNum ) {
                this.settings.breakpoint = i; break; }

            if ( this.settings.breakpointFrom !== -1 && this.settings.breakpointFrom > eventTime ) continue;
            if ( this.settings.breakpointTo !== -1 && this.settings.breakpointTo < eventTime ) continue;

            buffer.push( bpArray[i] );
        }

        // If no more events were found
        if ( buffer.length < getNum ) {
            this.settings.breakpoint = bpArray.length;
        }

        // Renders the events
        for ( var i = 0; i < buffer.length; i++ ) {
            this.settings.breakpointHtml+=this.generateEventHtml( buffer[i] );
        }  $(this.settings.breakpointView).html( this.settings.breakpointHtml );
        // Return the rest
        return bpArray.length-this.settings.breakpoint;

    },

    // Generate Event HTML
    generateEventHtml: function( elem ) {
        
        // Sets up vars
        var response = '',
            time_formatted = HelpFunctions.formatDate( elem.start_time, false, false ),
            name = String(elem.name).substr(0, 36) + ( String(elem.name).substr(36,99).split( ' ' )[0] );
        
        // Adds length formatting to name
        if ( name.length !== String(elem.name).length ) name += ' ...';
        var words = name.split(' ');
        for ( var i = 0; i < words.length; i++ ) {
            if ( words[i].length > 14 ) {
                words[i] = words[i].substr(0,14)+'-<br />'+words[i].substr(12,999999999);
            }
        } name = words.join(' ');

        // Generates the html itself
        var response = '<div class="event" id="'+elem.id+'">';
        response += '<div class="imgcontainer" style="background-image:url('+elem.imgurl+')" ></div>';
        response += '<div class="eventtext">';
        response += '<div class="title">'+name+'</div>';
        response += '<div class="start_time">'+time_formatted+'</div>';
        response += '<div class="eventlocation-container">';
        response += '<div class="eventblackbar"></div>';
        response += '<div class="eventlocation">'+elem.parentname+'</div></div></div></div>';
        return response;

    },

}


var EventSingleModule = {
    
    // Fields
    settings: {
    },
    
    // Init
    init: function() {
    },
    
    // Bind UI Actions
    bindUIActions: function() {
    },
    
    // Render Single View Event
    render_sv_event: function( eventid, cb ) {

        
        // Finds event in eventmodule event array
        var event;
        for ( var i = 0; i < EventContentModule.settings.events.length; i++ ) {
            if ( EventContentModule.settings.events[i].id.toString() === eventid ) {
                event = EventContentModule.settings.events[i]; break;
            }
        }

        // Generates html
        ViewHandler.settings.right_container.html( this.generate_sv_event_html( event ) );
        ViewHandler.settings.right_container.addClass( 'active' );
        ViewHandler.settings.left_container.addClass( 'active' );

        // Defines height of blue box height
        $('.event-sv-info-placeholder').css({height: $('.event-sv-info').outerHeight() + 'px'});
        
    },
    
    // Generate single view event html
    generate_sv_event_html: function( event ) {
        
        var desc = HelpFunctions.nl2p(HelpFunctions.linkifier( event.description ));
        var start_time = HelpFunctions.formatDate( event.start_time, true, true );
        

        var response = '<div class="event-sv-content-container">';
        response += '<div class="event-singleview">';
        response += '<div class="event-sv-parentname">'+event.parentname+'</div>';
        response += '<div class="event-sv-img" style="background-image:url('+event.imgurl+');"></div>';
        response += '<div class="event-sv-title">'+event.name+'</div>';
        response += '<div class="event-sv-start-time">'+start_time+'</div>';
        response += '<hr class="lineBreak" />';
        
        /* Status buttons
        response += '<div class="event-sv-status-btns" id="'+event.fbid[0]+'">';
        
        if ( attending !== 'unsure' ) {
            response += '<div class="interested-btn status-btn"><div class="icon">&#x2605;</div> <div class="text">Interesseret</div></div>';
        } else {
            response += '<div class="interested-btn status-btn attending"><div class="icon">&#x2605;</div> <div class="text">Ikke interesseret</div></div>';
        }
        
        if ( attending !== 'attending' ) {
            response += '<div class="attending-btn status-btn"><div class="icon">&plus;</div> <div class="text">Deltager</div></div>';
        } else {
            response += '<div class="attending-btn status-btn attending"><div class="icon">&times;</div> <div class="text">Deltager ikke</div></div>';
        }
        
        response += '</div>';*/

        response += '<div class="event-sv-desc">'+desc+'</div>';
        response += '</div>';
        
        response += '<div class="event-sv-info-placeholder"></div>';
        response += '<div class="event-sv-info">';
        response += '<div class="event-sv-parentname">'+event.parentname+'</div>';
        
        if ( event.adress !== null && typeof event.adress !== 'undefined' ) {
            response += '<div class="event-sv-adress">'+event.adress+'</div>';
        }
            
        if ( event.website !== null && typeof event.website !== 'undefined' ) {
            response += '<a class="event-sv-website" href="'+event.website+'">'+event.website+'</a>';
        }
        
        response += '</div></div>';
        if ( commercial_image_url !== '' ) {
            response += '<div class="commercial-placeholder"></div>';
            response += '<a href="'+commercial_link+'"><div class="commercial-img" style="background-image:url('+commercial_image_url+');"></div></a>';
        }
        
        return response;
        
    },
    
};



var ViewControllerModule = {

    // Fields
    settings: {
        ready: false,
        bbActive: false,
        backButton: $('.back-button'),
        betaWarning: $('.beta-warning'),
        socialMedia: $('.socialmedia'),
        mobile: false,
    },

    // Init
    init: function() {
        this.update();
        this.bindUIActions();
        this.settings.ready = true;
    },

    // Update
    update: function() {
        if ( $(window).innerWidth() <= 640) {
            this.settings.mobile = true;
            this.settings.backButton.addClass('mobile');
        } else {
            this.settings.mobile = false;
            this.settings.backButton.removeClass('mobile');
        }
    },

    // Bind UI Actions
    bindUIActions: function() {
        $(document).on( 'click', '.event', function() {
            this.activeBackButton();
        }.bind(this));

        $(window).on('resize', this.update.bind(this));
        this.settings.backButton.on( 'click', function() {
            if ( this.settings.mobile ) {
                ViewHandler.go_to( 0 );
            } else {
                ViewHandler.closeSingleView();
            } this.disableBackButton();
        }.bind(this));
    },

    // Activate back button
    activeBackButton: function() {
        if ( !this.settings.bbActive ) {
            setTimeout(function() {
                this.settings.backButton.addClass('active');
            }.bind(this), 300);

            this.settings.betaWarning.removeClass('active');
            this.settings.socialMedia.removeClass('active');

            this.settings.bbActive = true;
        }
    },

    // Disable back button
    disableBackButton: function() {
        if ( this.settings.bbActive ) {
            this.settings.backButton.removeClass('active');

            setTimeout(function() {
                this.settings.betaWarning.addClass('active');
                this.settings.socialMedia.addClass('active');
            }.bind(this), 300);

            this.settings.bbActive = false;
        }
    }

};



// Search Module
var SearchModule = {

    // Vars
    settings: {
        keyword: '',
        getnum: 15,
        left_container: $('.left-container .content'),
        right_container: $('.right-container .content'),
    },

    // Init
    init: function() {
        this.bindUIActions();
    },

    // Bind UI Actions
    bindUIActions: function() {

        // Visual
        $('#searchfield').on('focus', function() {
            $('#searchlabel').addClass("not-visible");
         });

        $('#searchfield').on('focusout', function() {
            if ($(this).val() == "") {
                $('#searchlabel').removeClass("not-visible");
            }
        });

        // Search itself
        $('#searchfield').on( 'keyup', function(e) {
            this.settings.keyword = $('#searchfield').val().toLowerCase();
            if ( e.keyCode === 13 && this.settings.keyword !== '' ) {
                this.search();
            }
        }.bind(this));

    },

    // Search function
    search: function() {

        // Checks if events have been loaded in
        var resp = [];
        var events = EventContentModule.settings.events;

        // Loops through all events and assigns them a fitness score
        for ( var i = 0; i < events.length; i++ ) {
            var fitness = 0, tTitle = 0, tDesc = 0, tParent = 0;
            var keywords = this.settings.keyword.split(' ');
            for ( var ki = 0; ki < keywords.length; ki++ ) {

                // Checks for includes of the individual keyword
                if ( keywords[ki].length > 1 ) {
                    tTitle += HelpFunctions.numOfIncludes( events[i].name.toLowerCase(), keywords[ki] ) * 2;
                    tParent += HelpFunctions.numOfIncludes( events[i].parentname.toLowerCase(), keywords[ki] ) * 4;

                    if ( events[i].description !== null ) {
                        tDesc += HelpFunctions.numOfIncludes( events[i].description.toLowerCase(), keywords[ki] ) / 2;
                    }
                }
            }

            // Adds elemnt if fitness is more than 0
            fitness = tTitle + tDesc + tParent;
            if ( fitness >= 4 || tTitle > 0 ) {
                resp.push( [ fitness, events[i] ] );
            }
        }

        // Sorts the search results by fitness score
        resp.sort(function(a, b) {
            if ( a[0] < b[0] ) return 1;
            if ( a[0] > b[0] ) return -1;
            return 0;
        });

        // Renders the results
        var events = [];
        for ( var i = 0; i < resp.length; i++ ) {
            events.push( resp[i][1] );
        }

        EventCalenderModule.renderEventCalender('.eventscontainer', { acceptOld: true, content: events } );

    },

}






// @koala-prepend 'modules/tools/help_functions.js';
// @koala-prepend 'modules/tools/month_picker.js';
// @koala-prepend 'modules/contentLayer/eventContent.js';
// @koala-prepend 'modules/contentLayer/locationContent.js';
// @koala-prepend 'modules/contentLayer/locationCategoryContent.js';
// @koala-prepend 'modules/view_handler.js';
// @koala-prepend 'modules/layoutLayer/headerLayout.js';
// @koala-prepend 'modules/layoutLayer/frontpageLayout.js';
// @koala-prepend 'modules/layoutLayer/eventCalenderLayout.js';
// @koala-prepend 'modules/layoutLayer/eventSingleLayout.js';
// @koala-prepend 'modules/layoutLayer/viewController.js';
// @koala-prepend 'modules/search.js';

$(function() {
    $('a').click(function(e) {
        if ($(this).attr('href') === '#') {
            e.preventDefault();
        }
    });

    HeaderModule.init();
    ViewControllerModule.init();

    EventContentModule.init(function() {
        onContentLoad();
    });

    var onContentLoad = function() {
        FrontPageModule.init();
        ViewHandler.init();
        SearchModule.init();
        EventSingleModule.init();
        syncScroll.init($('#page-content'), '.container-section');
    }
});
