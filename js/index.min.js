
var HelpFunctions = {

    // Num of includes
    numOfIncludes: function( haystack, needle ) {
        var numOf = 0, indexOf = 0;
        while ( indexOf !== -1 ) { 
            indexOf = haystack.indexOf( needle, indexOf );
            if ( indexOf !== -1 ) { numOf++; indexOf++; }
        } 

        return numOf;
    },
    
    // Nl2p
    nl2p: function( text ) {
        return (text.length > 0 ? '<p>' + text.replace(/[\r\n]+/g, '</p><p>') + '</p>' : null);
    },
 
    // Linkifier
    linkifier: function( text ) {
        
        //URLs starting with http://, https://, or ftp://
        var replacePattern1 = /(\b(https?|ftp):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gim;
        var replacedText = text.replace(replacePattern1, '<a href="$1" target="_blank">$1</a>');

        //URLs starting with www. (without // before it, or it'd re-link the ones done above)
        var replacePattern2 = /(^|[^\/])(www\.[\S]+(\b|$))/gim;
        var replacedText = replacedText.replace(replacePattern2, '$1<a href="http://$2" target="_blank">$2</a>');

        //Change email addresses to mailto:: links
        var replacePattern3 = /(\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,6})/gim;
        var replacedText = replacedText.replace(replacePattern3, '<a href="mailto:$1">$1</a>');

        return replacedText;
        
    }, 
    
    // Format date
    formatDate: function( timestr, hourly ) {
        var date = new Date( timestr.substr(0, 16) );
        var response = parseInt(date.getDate())+' / '+parseInt((date.getMonth()+1))+' - '+parseInt(date.getFullYear());
        if ( hourly ) {
            if ( date.getMinutes() < 10 ) {
                response += ' '+(date.getHours()+1)+':0'+date.getMinutes();
            } else {
                response += ' '+(date.getHours()+1)+':'+date.getMinutes();
            }
        }
            
        return response;
    }
    
}


// Heya
jQuery.prototype.initMonthPicker = function( options, callback ) {
    
    // Params
    var appendSelector = null;
    if ( typeof options.appendSelector !== 'undefined' && options.appendSelector !== null ) appendSelector = options.appendSelector;
    
    var years = null;
    if ( typeof options.years !== 'undefined' && options.years !== null ) years = options.years;
    
    // Other vars
    var months = {
        '-1': 'Alle måneder',
        '0': 'Januar',
        '1': 'Februar',
        '2': 'Marts',
        '3': 'April',
        '4': 'Maj',
        '5': 'Juni',
        '6': 'Juli',
        '7': 'August',
        '8': 'September',
        '9': 'Oktober',
        '10': 'November',
        '11': 'December',
    }
    
    var elem = $(this),
        pickerClass = 'monthPicker_selector',
        pickerHtml = '<div class="'+pickerClass+'">';
    
    for ( var key in months ) {
        pickerHtml += '<div class="month" data-key="'+key+'">'+months[key]+'</div>';
    } pickerHtml += '</div>';
    
    // Adds html to elem itself
    elem.html( 'Alle måneder &#9947;' );
    
    // Appends on click
    elem.click( function() {
        if ( $(this).hasClass('pickerActive') ) {
            
            // Removes Month picker
            $('.'+pickerClass).remove();
            $(this).removeClass('pickerActive'); 
            
        } else {
            
            // Appends picker to defined selector or body
            if ( appendSelector !== null ) $(appendSelector).append( pickerHtml );
            else $('body').append( pickerHtml );
            $(this).addClass('pickerActive'); 
            
            // Picker functionality
            $('.'+pickerClass+' .month').click( function() {
                
                elem.html( months[$(this).attr('data-key')]+' &#9947;' ); 
                if ( parseInt($(this).attr('data-key')) === -1 ) {
                    elem[0].month_from = new Date().getTime();
                    elem[0].month_to = new Date(3000, 01).getTime();
                } else {
                    elem[0].month_from = new Date(2017, parseInt($(this).attr('data-key'))).getTime();
                    elem[0].month_to = new Date(2017, parseInt($(this).attr('data-key'))+1).getTime();
                } callback( elem );
                
            });
            
        }
    }.bind(elem, pickerClass));

}


// Widget way of doing stuff
var EventContentModule = {
    
    // Variables
    settings: {
        cb: function() {},
        ready: false,
        get_url: rest_api+'events?per_page=100&page=',
        page_counter: 1,
        default_appendSelector: '.eventscontainer',
        events: [],
        placeholder_img: 'https://developer.walgreens.com/sites/default/files/404.jpg',
    },
    
    // Ctor
    init: function( cb ) {
        this.settings.cb = cb;
        this.get_events();
    },
    
    // Gets events and assigns them to event var
    get_events: function() {
        
        // Opens xhr request
        var request = new XMLHttpRequest();
        request.onload = function( data ) {
            
            var json = $.parseJSON( data.target.response );
            for ( var i = 0; i < json.length; i++ ) {
                if ( json[i].imgurl[0] === 'undefined' || json[i].imgurl[0] === null ) {
                    json[i].imgurl[0] = this.settings.placeholder_img; }
                this.settings.events.push( json[i] );
            }
            
            if ( json.length < 1 ) {
                this.render_ready = true;
                this.settings.page_counter = 0;
                this.settings.events.sort(function( a, b ) {
                    if( a.start_time[0] < b.start_time[0] ) return -1;
                    if( a.start_time[0] > b.start_time[0] ) return 1;
                    return 0;
                });
                
                this.settings.cb();
                return;
            } 
            
            this.settings.page_counter ++;
            this.get_events();
            
        }.bind(this);
        
        // Sends xhr request
        request.open('GET', this.settings.get_url+this.settings.page_counter.toString());
        request.send();
    
    },
    
}






// Location module
var LocationModule = {
    
    // Fields
    settings: {
        ready: false,
        page_counter: 1,
        locations: [],
        callback: null,
    },
    
    // Ctor
    init: function( cb ) {
        this.settings.callback = cb;
        this.get_locations();
    },
    
    // Get locations
    get_locations() {
        
        // Opens up new xhrequest
        var request = new XMLHttpRequest();
        request.onload = function( data ) {
            
            // Loop through data and plops it into array
            var jsonResponse = $.parseJSON( data.target.response );
            for ( var i = 0; i < jsonResponse.length; i++ ) {
                this.settings.locations.push( jsonResponse[i] );
            }
            
            // If no elems were received, loop done
            if ( jsonResponse.length < 1 ) {
                this.settings.page_counter = 0;
                this.settings.ready = true;
            } else {
                this.settings.page_counter++;
                this.get_locations( );    
            }
            
        }.bind(this);
        
        // Specifies get url, and sends
        request.open( 'GET', rest_api+'locations?per_page=100&page='+this.settings.page_counter );
        request.send();
        
    },
    
    // Render locations
    render_locations: function() {
    },
    
    // Generate location html
    generate_location_html: function() {
    },
    
}


// Lcoation Category Module
var LocationCategoryModule = {
    
    // Fields
    settings: {
        ready: false,
        unsorted_location_categories: {},
        sorted_location_categories: [],
    },
    
    // Init
    init: function() {
        this.get_location_categories();  
    },
    
    // Get Location Categories
    get_location_categories: function() {
        
        // Generates object of location categories,
        // from the existing location array
        var locations = LocationModule.settings.locations;
        for ( var i = 0; i < locations.length; i++ ) {
            for ( var ci = 0; ci < locations[i].categories[0].length; ci++ ) {
                var category = locations[i].categories[0][ci];
                if ( typeof this.settings.unsorted_location_categories[category.category_name] === 'undefined' ) {
                    this.settings.unsorted_location_categories[category.category_name] = {
                        category_counter: 1,
                        category_name: category.category_name,
                        category_imgurl: category.category_imgurl,
                    };
                } else { this.settings.unsorted_location_categories[category.category_name].category_counter++; }
            }
        } 
        
        // Sorts categories after highest counter
        var buffer = [];
        for ( var key in this.settings.unsorted_location_categories ) {
            var isset = false;
            for ( var i = 0; i < buffer.length; i++ ) {
                if ( this.settings.unsorted_location_categories[key].category_counter > buffer[i].category_counter ) {
                    buffer.splice( i, 0, this.settings.unsorted_location_categories[key] );
                    isset = true; break;
                }
            }
            
            if ( !isset ) buffer.push( this.settings.unsorted_location_categories[key] );
        } this.settings.sorted_location_categories = buffer;
        
        // Annnnd its ready
        this.settings.ready = true;
        
    },
    
    // Render Location Categories
    render_location_categories: function( appendSelector ) {
        var response = '<div class="category-container">'; 
        
        // Loops through all categories and generates html
        for ( var i = 0; i < this.settings.sorted_location_categories.length; i++ ) {
             response += this.generate_category_html( this.settings.sorted_location_categories[i] ); }
        
        // Appends html
        $( appendSelector ).append( response+='</div>' );
    
    },
    
    // Generate location category html
    generate_category_html: function( category ) {
        
        // Generates html
        var response = '<div class="category" style="background-image:url('+category.category_imgurl+')">';
        response += '<div class="category-content-container">';
        response += '<div class="category-title">'+category.category_name+'</div>';
        response += '<div class="category-count">'+category.category_counter+'</div></div></div>';
        return response;
    
    },
    
}

// Event calender view module
var EventCalenderModule = {
    
    // Fields
    settings: {  
        html: '',
    },
    
    // Init
    init: function() {
    },
    
    // Render Events
    renderEventCalender: function( view, modifiers ) {
        
        // Checks for modifiers
        var acceptOld = false, getNum = 37, from = -1, to = -1;
        if ( typeof modifiers.acceptOld !== 'undefined' ) acceptOld = modifiers.acceptOld;
        if ( typeof modifiers.getNum !== 'undefined' ) getNum = modifiers.getNum;
        if ( typeof modifiers.from !== 'undefined' ) from = modifiers.from;
        if ( typeof modifiers.to !== 'undefined' ) to = modifiers.to;
        
        // Makes render buffer array
        var buffer = [], events = EventContentModule.settings.events;
        for ( var i = 0; i < events.length; i++ ) {
            if ( buffer.length > getNum ) break;
            
            var eventTime = new Date(events[i].start_time[0].substr(0,16)).getTime();
            if ( !acceptOld && eventTime < new Date().getTime() ) continue;
            if ( from !== -1 && from > eventTime ) continue;
            if ( to !== -1 && to < eventTime ) continue;
            
            buffer.push( events[i] );
        }
        
        // Sorts buffer
        buffer.sort( function( a, b ) {
            var aTime = new Date(a.start_time[0].substr(0,16)).getTime();
            var bTime = new Date(b.start_time[0].substr(0,16)).getTime();
            if ( aTime < bTime ) return -1;
            if ( aTime > bTime ) return 1;
            return 0;
        });
        
        // Generates html
        for ( var i = 0; i < buffer.length; i++ ) {
            this.settings.html+=this.generateEventHtml( buffer[i] );
        }
        
        // Renders
        $(view).html( this.settings.html );
        this.settings.html = '';
        
    },
    
    // Generate Event HTML
    generateEventHtml: function( elem ) {
        
        // Sets up vars
        var response = '',
            time_formatted = HelpFunctions.formatDate( elem.start_time[0] ),
            name = String(elem.name).substr(0, 36) + ( String(elem.name).substr(36,99).split( ' ' )[0] );
        
        // Adds length formatting to name
        if ( name.length !== String(elem.name).length ) name += ' ...';
        var words = name.split(' ');
        for ( var i = 0; i < words.length; i++ ) {
            if ( words[i].length > 14 ) {
                words[i] = words[i].substr(0,14)+'-<br />'+words[i].substr(12,999999999);
            } 
        } name = words.join(' ');
        
        // Generates the html itself
        var response = '<div class="event" id="'+elem.id+'">';
        response += '<div class="imgcontainer" style="background-image:url('+elem.imgurl[0]+')" ></div>';
        response += '<div class="eventtext">';
        response += '<div class="title">'+name+'</div>';
        response += '<div class="start_time">'+time_formatted+'</div>';
        response += '<div class="eventlocation-container">';
        response += '<div class="eventblackbar"></div>';
        response += '<div class="eventlocation">'+elem.parentname+'</div></div></div></div>';
        return response;
        
    },
    
}

var EventSingleModule = {
    
    // Fields
    settings: {
    },
    
    // Init
    init: function() {
    },
    
    // Bind UI Actions
    bindUIActions: function() {  
    },
    
    // Render Single View Event
    render_sv_event: function( eventid, cb ) {

        
        // Finds event in eventmodule event array
        var event;
        for ( var i = 0; i < EventContentModule.settings.events.length; i++ ) {
            if ( EventContentModule.settings.events[i].id.toString() === eventid ) {
                event = EventContentModule.settings.events[i]; break;
            }
        }
        
        // Generates html
        ViewHandler.settings.right_container.html( this.generate_sv_event_html( event ) );
        ViewHandler.settings.right_container.addClass( 'active' );
        ViewHandler.settings.left_container.addClass( 'active' );

        // Defines height of blue box height
        $('.event-sv-info-placeholder').css({height: $('.event-sv-info').outerHeight() + 'px'});
        
    },
    
    // Generate single view event html
    generate_sv_event_html: function( event ) {
        
        var desc = HelpFunctions.nl2p(HelpFunctions.linkifier( event.description[0] ));
        var start_time = HelpFunctions.formatDate( event.start_time[0], true );
        
        var response = '<div class="event-singleview-container" >';
        response += '<div class="sync-container">';
        response += '<div class="event-sv-content-container">';
        response += '<div class="event-singleview">';
        response += '<div class="event-sv-parentname">'+event.parentname[0]+'</div>';
        response += '<div class="event-sv-img" style="background-image:url('+event.imgurl[0]+');"></div>';
        response += '<div class="event-sv-title">'+event.name[0]+'</div>';
        response += '<div class="event-sv-start-time">'+start_time+'</div>';
        response += '<hr class="lineBreak" />';
        
        /* Status buttons
        response += '<div class="event-sv-status-btns" id="'+event.fbid[0]+'">';
        
        if ( attending !== 'unsure' ) {
            response += '<div class="interested-btn status-btn"><div class="icon">&#x2605;</div> <div class="text">Interesseret</div></div>';
        } else {
            response += '<div class="interested-btn status-btn attending"><div class="icon">&#x2605;</div> <div class="text">Ikke interesseret</div></div>';
        }
        
        if ( attending !== 'attending' ) {
            response += '<div class="attending-btn status-btn"><div class="icon">&plus;</div> <div class="text">Deltager</div></div>';
        } else {
            response += '<div class="attending-btn status-btn attending"><div class="icon">&times;</div> <div class="text">Deltager ikke</div></div>';
        }
        
        response += '</div>';*/
        
        response += '<div class="event-sv-desc">'+desc+'</div>';
        response += '</div>';
        
        response += '<div class="event-sv-info-placeholder"></div>';
        response += '<div class="event-sv-info">';
        response += '<div class="event-sv-parentname">'+event.parentname[0]+'</div>';
        
        if ( event.adress[0] !== null && typeof event.adress[0] !== 'undefined' ) {
            response += '<div class="event-sv-adress">'+event.adress[0]+'</div>';
        }
            
        if ( event.website[0] !== null && typeof event.website[0] !== 'undefined' ) {
            response += '<a class="event-sv-website" href="'+event.website[0]+'">'+event.website[0]+'</a>';
        }
        
        response += '</div></div>';
        if ( commercial_image_url !== '' ) {
            response += '<div class="commercial-placeholder"></div>';
            response += '<a href="'+commercial_link+'"><div class="commercial-img" style="background-image:url('+commercial_image_url+');"></div></a>';
        }
        
        return response+='</div></div>';
        
    },
    
};

// Front page module
var FrontPageModule = {
    
    // Variables
    settings: {  
        ready: false,
        lc: '',
    },
    
    // Init
    init: function() {  
        
        // Generates left container content
        var lc = '<div id="eventsbar">';
        lc += '<div id="eventslayoutbtns">';
        lc += '<img class="blocklayoutbtn" src="'+template_uri+'/style/assets/icons/blockLayout.PNG" />';
        lc += '<img class="linelayoutbtn" src="'+template_uri+'/style/assets/icons/lineLayout.PNG" /></div>';
        lc += '<div class="monthSelector"></div>';
        lc += '<div class="picker"></div></div>';
        
        lc += '<div class="eventscontainer"></div>';
        this.settings.lc = lc;
        $('.left-container').html(lc);
        
        // Generates front page
        this.generate_front_page();
        
    },
    
    // Generate front page
    generate_front_page: function() {
        
        // Adds the base front page html to the container
        $('.left-container').removeClass('active');
        $('.left-container').html( this.settings.lc );
        $('.right-container').html('').removeClass('active');
        $('.eventscontainer').removeClass('lineLayout');
        
        // Binds ui actions
        this.bindUIActions();
        
        // Gets events and locations categories
        EventCalenderModule.renderEventCalender( '.eventscontainer', { getNum: 49, acceptOld: false });
        ViewHandler.bindUIActions();

        // Do flickilty stuff 
        if(ViewHandler.settings.poly_view){
            ViewHandler.settings.right_container.addClass('spoopy');
            setTimeout(function(){
                ViewHandler.settings.right_container.removeClass('spoopy');
                $('.left-container, .right-container').css('height', 'auto');
                $('.content-container').flickity('reloadCells');
                $('.left-container, .right-container').css('height', $('.content-container .flickity-viewport').height());
                $(window).trigger('scroll');
                ViewHandler.go_to(0);
            },100);
        }
        
        
        // Annnnnd its ready
        this.settings.ready = true;
    
    },
    
    // Bind UI Actions
    bindUIActions: function() {
        
        if ( !this.settings.ready ) {
            $('.logo-container').on( 'click', function() {
                this.generate_front_page();
                $(window).scrollTop(0);
                $('#searchfield').val('');
                this.bindUIActions();
            }.bind( this ));
        }
        
        $('.blocklayoutbtn').on( 'click', function() {
            $('.eventscontainer').removeClass('lineLayout'); 
        });
        
        $('.linelayoutbtn').on( 'click', function() {
            $('.eventscontainer').addClass('lineLayout');
        });
        
        $('.monthSelector').initMonthPicker({
            'appendSelector': '.picker',
        }, function( elem ) {
            
            $('.eventscontainer').html( '' );
            EventCalenderModule.renderEventCalender( '.eventscontainer', { getNum: 49, acceptOld: false, from: elem[0].month_from, to: elem[0].month_to });
        
        }.bind(this));
    },
    
}

// Header Module
var HeaderModule = {
    
    // Vars
    settings: {
        menu_ready: false,
        breakpoint: 0,
        views: [],
    },
    
    // Init
    init: function() {
        this.bindUIActions();
    },
    
    // Bind ui actions
    bindUIActions: function() {
        
        // Adds classes to menu ( Like active, fixed, etc )
        this.settings.menu_ready = false;
        $(window).on('scroll', function() {
            $('.header-container').removeClass( 'active' );
            $('.menu-show-btns').removeClass( 'active' );

            this.settings.breakpoint = $('#header').height() + $('#header').position().top;
            if ( $(window).scrollTop() >= this.settings.breakpoint ) {
                $('.header-container').addClass( 'fixed' );
                $('.header-placeholder').addClass( 'fixed' );
                $('.menu-show-btns').addClass( 'show' );
                $('.event-singleview').addClass( 'fixed' );
                this.settings.menu_ready = true;
            } else {
                $('.header-container').removeClass( 'fixed' );
                $('.header-placeholder').removeClass( 'fixed' );
                $('.menu-show-btns').removeClass( 'show' );
                $('.event-singleview').removeClass( 'fixed' );
                this.settings.menu_ready = false;
            }
            
        }.bind(this));
        
        // Checks for key press on space
        $('.menu-show-btns').on('click', this.show_menu.bind(this));
        $(window).on('keydown', function(e) {
            if ( $(window).scrollTop() > $('#header').height() 
                && !$('.header-container').hasClass( 'active' )
                && e.keyCode === 32 ) {

                e.preventDefault();
                $('#searchfield').focus();
                this.show_menu();

            }
        }.bind(this));
        
    },
    
    // Show menu ( Drop down look-a-like )
    show_menu: function() {
          if ( this.settings.menu_ready ) {
            if ( $('.menu-show-btns').hasClass( 'active' ) ) {
                $('.menu-show-btns').removeClass( 'active' );
                $('.header-container').removeClass( 'active' );
            } else {
                $('.menu-show-btns').addClass( 'active' );
                $('.header-container').addClass( 'active' );    
            }
        }
    },
    
}


// Search Module
var SearchModule = {
    
    // Vars
    settings: {
        keyword: '',
        getnum: 15,
        left_container: $('.left-container'),
        right_container: $('.right-container'),
    },
    
    // Init
    init: function() {
        this.bindUIActions();
    },
    
    // Bind UI Actions
    bindUIActions: function() {
        
        // Visual
        $('#searchfield').on('focus', function() {
            $('#searchlabel').addClass("not-visible");
         });

        $('#searchfield').on('focusout', function() {
            if ($(this).val() == "") {
                $('#searchlabel').removeClass("not-visible");
            }
        });
        
        // Search itself
        $('#searchfield').on( 'keyup', function(e) {
            this.settings.keyword = $('#searchfield').val().toLowerCase();
            if ( e.keyCode === 13 && this.settings.keyword !== '' ) {
                this.search();
            }
        }.bind(this));
        
    },
    
    // Search function
    search: function() {
        
        // Checks if events have been loaded in
        var resp = [];
        var events = EventModule.settings.events;

        // Loops through all events and assigns them a fitness score
        for ( var i = 0; i < events.length; i++ ) {
            console.log( 'hi' );
            var fitness = 0, tTitle = 0, tDesc = 0;
            var keywords = this.settings.keyword.split(' ');
            for ( var ki = 0; ki < keywords.length; ki++ ) {

                // Checks for includes of the individual keyword
                if ( keywords[ki].length > 1 ) {
                    tTitle += HelpFunctions.numOfIncludes( events[i].name[0].toLowerCase(), keywords[ki] ) * 2;
                    tDesc += HelpFunctions.numOfIncludes( events[i].description[0].toLowerCase(), keywords[ki] );
                }

                // Checks for includes of chars in the keyword
                for( var ni = 0; ni < keywords[ki].length; ni++ ) {
                    tTitle += HelpFunctions.numOfIncludes( events[i].name[0].toLowerCase(), keywords[ki].charAt(ni) ) / 15;
                    tDesc += HelpFunctions.numOfIncludes( events[i].name[0].toLowerCase(), keywords[ki].charAt(ni) ) / 120;
                }
            }

            // Adds elemnt if fitness is more than 0
            if ( tTitle + tDesc > 0 ) {
                fitness = tTitle + tDesc / 2;
                resp.push( [ fitness, events[i] ] )
            }
        }
        
        // Sorts the search results by fitness score
        resp.sort(function(a, b) {
            if ( a[0] < b[0] ) return 1;
            if ( a[0] > b[0] ) return -1;
            return 0;
        });
        
        // Renders the results
        this.render_results( resp );
        
    },
    
    // Render search results
    render_results: function( results ) {
        
        // Sets up the left container html variable
        var lc = '<div class="search-field-container">';
        lc += '<input type="text" class="search-field" /></div>';
        
        // Loops through results and generates html
        var fitness = 0, counter = 0; do {
            fitness = results[counter][0];
            if ( fitness <= 1 ) break;
            lc += '<div class="result">';
            lc += '<div class="result-title">'+results[counter][1].name+'</div></div>';
            counter++;
        } while ( fitness > 1 );
        
        // Sets up the right container html variable
        var rc = '';
        
        // Renders the html
        $('.left-container').html( lc );
        $('.right-container').html( rc );
        
    },
    
}







// View handler
var ViewHandler = {
    
    // Fields
    settings: {
        ready: false,
        poly_view: false,
        left_container: $('.left-container'),
        right_container: $('.right-container'),
    },
    
    // Init
    init: function() {
        // Load event single view
        var event_sv, lastScroll = 0, isNew = false;
        $(document).on( 'click', '.event', function() {
            ViewHandler.settings.right_container.addClass('spoopy');
            
            $('.right-container').html('<div class="load-container"><img src="'+template_uri+'/style/assets/icons/loading.gif" class="loader" /></div>');
            ViewHandler.sync_scroll( $('.load-container'), lastScroll, true );
            EventSingleModule.render_sv_event( $(this).attr('id') );
            EventSingleModule.bindUIActions();
            
            if(ViewHandler.settings.poly_view){
            
                setTimeout(function(){
                    ViewHandler.settings.right_container.removeClass('spoopy');
                    $('.left-container, .right-container').css('height', 'auto');
                    $('.content-container').flickity('reloadCells');
                    $('.left-container, .right-container').css('height', $('.content-container .flickity-viewport').height());
                    $(window).trigger('scroll');
                    ViewHandler.go_to(1);
                },100);
            }
            
            event_sv = $('.event-singleview-container .sync-container');
            isNew = true;
        
        });

        // Sync scroll
        $(window).on( 'scroll', function() {
            lastScroll = this.sync_scroll( event_sv, lastScroll, isNew );
            isNew = false;
        }.bind(this));
        
        this.settings.ready = true;
    },
    
    // Bind UI Actions
    bindUIActions: function() {
    },
    
    // Poly view init
    poly_view_init: function() {
        $('.content-container').flickity({
            cellAlign: 'left',
            contain: true,
            draggable: false,
            prevNextButtons: false,
            pageDots: false,
            adaptiveHeight: false,
        });    
        this.settings.poly_view = true;
    },
    
    // Go to
    go_to: function( index ) {
        $('.content-container').flickity( 'select', index );
    },
    
    // Sync Scroll
    sync_scroll: function( event_sv, lastScroll, isNew ) {
        if ( typeof event_sv !== 'undefined' ) {
            var st = $(window).scrollTop(),
                delta = st - lastScroll,
                newTop;
            
            // If new elem
            if ( isNew ) {
                newTop = $(window).scrollTop() - event_sv.parent().offset().top + $('#headerbar').innerHeight();
            }
                
            // Down
            if ( st + $(window).innerHeight() > event_sv.offset().top + event_sv.innerHeight() && delta > 0) {
                newTop = st + ( $(window).innerHeight() - event_sv.innerHeight() ) - event_sv.parent().offset().top }
            
            // Up
            if ( event_sv.innerHeight() < $(window).innerHeight() - $('#headerbar').innerHeight() ||
                 (st < event_sv.offset().top - $('#headerbar').innerHeight() && delta < 0 )) {
                newTop = st - event_sv.parent().offset().top + $('#headerbar').innerHeight(); }
            
            // Top
            if ( newTop < 0 ) { newTop = 0; }
            if ( newTop > event_sv.parent().innerHeight() - event_sv.innerHeight() ) {
                newTop = event_sv.parent().innerHeight() - event_sv.innerHeight();
            }
            
            event_sv.css({'top':newTop+'px'});
            return st;
        }
        
        // Failure
        return 0;
    },
    
};







// @koala-prepend 'modules/tools/help_functions.js';
// @koala-prepend 'modules/tools/month_picker.js';
// @koala-prepend 'modules/contentLayer/eventContent.js';
// @koala-prepend 'modules/contentLayer/locationContent.js';
// @koala-prepend 'modules/contentLayer/locationCategoryContent.js';
// @koala-prepend 'modules/view_handler.js';
// @koala-prepend 'modules/layoutLayer/headerLayout.js';
// @koala-prepend 'modules/layoutLayer/frontpageLayout.js';
// @koala-prepend 'modules/layoutLayer/eventCalenderLayout.js';
// @koala-prepend 'modules/layoutLayer/eventSingleLayout.js';
// @koala-prepend 'modules/search.js';

$(function() {
    $('a').click(function(e) {
        if ($(this).attr('href') === '#') {
            e.preventDefault();
        }
    });
    
    HeaderModule.init();
    EventContentModule.init(function() {
        onContentLoad();
    });
    
    ViewHandler.poly_view_init();
    var onContentLoad = function() {
        FrontPageModule.init();
        SearchModule.init();
        ViewHandler.init();
        EventSingleModule.init();
    }
});

